name: "Diff Size"
description: Adds a label to each pull request based on the number of lines changed.

inputs:
  xs-threshold:
    description: "The maximum number of lines changed for an extra small label to be assigned (default: 10)."
    required: true
    default: "10"
  s-threshold:
    description: "The maximum number of lines changed for a small label to be assigned (default: 100)."
    required: true
    default: "100"
  m-threshold:
    description: "The maximum number of lines changed for a medium label to be assigned (default: 200)."
    required: true
    default: "200"
  l-threshold:
    description: "The maximum number of lines changed for a large label to be assigned (default: 400)."
    required: true
    default: "400"
  xl-threshold:
    description: "The maximum number of lines changed for a extra large label to be assigned (default: 800)."
    required: true
    default: "800"
  xs-label:
    description: "The name of the label for very small number of lines changed."
    required: true
    default: "size/XS"
  s-label:
    description: "The name of the label for small number of lines changed."
    required: true
    default: "size/S"
  m-label:
    description: "The name of the label for medium number of lines changed."
    required: true
    default: "size/M"
  l-label:
    description: "The name of the label for large number of lines changed."
    required: true
    default: "size/L"
  xl-label:
    description: "The name of the label for very large number of lines changed."
    required: true
    default: "size/XL"
  xxl-label:
    description: "The name of the label for very, very large number of lines changed."
    required: true
    default: "size/XXL"

outputs:
  label:
    description: "The label assigned to the pull request."
  size:
    description: "The calculated size of the pull request's changes."
  includes:
    description: "The files included in the size calculation."
  excludes:
    description: "The files excluded from the size calculation."

runs:
  using: "node20"
  main: "index.js"

  # using: "composite"
  # steps:
  #   - name: Create labels
  #     uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
  #     with:
  #       script: |
  #         const labels = await github.rest.issues.listLabelsForRepo({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #         });

  #         const have = new Set(labels.data.map((l) => l.name));
  #         const want = [
  #           {
  #             name: '${{ inputs.xs-label }}',
  #             description: 'Pull requests with a very small number of lines changed.',
  #           },
  #           {
  #             name: '${{ inputs.s-label }}',
  #             description: 'Pull requests with a small number of lines changed.',
  #           },
  #           {
  #             name: '${{ inputs.m-label }}',
  #             description: 'Pull requests with a medium number of lines changed.',
  #           },
  #           {
  #             name: '${{ inputs.l-label }}',
  #             description: 'Pull requests with a large number of lines changed.',
  #           },
  #           {
  #             name: '${{ inputs.xl-label }}',
  #             description: 'Pull requests with a very large number of lines changed.',
  #           },
  #           {
  #             name: '${{ inputs.xxl-label }}',
  #             description: 'Pull requests with a very, very large number of lines changed.',
  #           },
  #         ];

  #         const missing = want.filter(l => !have.has(l.name));

  #         for (label of missing) {
  #           core.debug(`creating label: ${label.name}`);

  #           await github.rest.issues.createLabel({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             name: label.name,
  #             color: '4f348b',
  #             description: label.description,
  #           });
  #         }

  #   - name: Gather excludes
  #     id: excludes
  #     uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
  #     with:
  #       script: |
  #         let names = '';
  #         await exec.exec(
  #           'git',
  #           ['diff', 'origin/${{ github.base_ref }}', 'HEAD', '--name-only', '--no-renames'],
  #           {
  #             listeners: {
  #               stdout: (data) => {
  #                 names += data.toString();
  #               },
  #             }
  #           },
  #         );

  #         const files = names.split(/\r?\n/).filter(n => n.length > 0);

  #         let attrs = '';
  #         await exec.exec(
  #           'git',
  #           ['check-attr', 'linguist-generated', 'linguist-vendored', '--', ...files],
  #           {
  #             listeners: {
  #               stdout: (data) => {
  #                 attrs += data.toString();
  #               },
  #             }
  #           },
  #         );

  #         let excludes = new Set(attrs.split(/\r?\n/).filter(e => e.endsWith(': set')).map(e => e.split(':')[0]));
  #         core.setOutput('excludes', [...excludes].join(' '));

  #   - name: Calculate size
  #     id: size
  #     uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
  #     with:
  #       script: |
  #         const excludes = '${{ steps.excludes.outputs.excludes }}'.split(' ').filter(e => e.length > 0);

  #         let changed = ''
  #         await exec.exec(
  #           'git',
  #           ['diff', 'origin/${{ github.base_ref }}', 'HEAD', '--numstat', '--ignore-space-change', '--', '.', ...excludes],
  #           {
  #             listeners: {
  #               stdout: (data) => {
  #                 changed += data.toString();
  #               },
  #             }
  #           },
  #         );

  #         const data = changed.split(/\r?\n/).filter(c => c.length > 0).map((c) => {
  #           const parts = c.split(/\s+/);
  #           return {
  #             added: parseInt(parts[0]),
  #             removed: parseInt(parts[1]),
  #             name: parts[2],
  #           };
  #         });

  #         const size = data.reduce((total, d) => total + d.added + d.removed, 0);
  #         core.setOutput('size', size);

  #   - name: Select label
  #     id: label
  #     uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
  #     with:
  #       script: |
  #         const size = parseInt('${{ steps.size.outputs.size }}');
  #         const thresholds = [
  #           {
  #             label: '${{ inputs.xs-label }}',
  #             max: parseInt('${{ inputs.xs-threshold }}'),
  #           },
  #           {
  #             label: '${{ inputs.s-label }}',
  #             max: parseInt('${{ inputs.s-threshold }}'),
  #           },
  #           {
  #             label: '${{ inputs.m-label }}',
  #             max: parseInt('${{ inputs.m-threshold }}'),
  #           },
  #           {
  #             label: '${{ inputs.l-label }}',
  #             max: parseInt('${{ inputs.l-threshold }}'),
  #           },
  #           {
  #             label: '${{ inputs.xl-label }}',
  #             max: parseInt('${{ inputs.xl-threshold }}'),
  #           },
  #         ];

  #         let label = '${{ inputs.xxl-label }}';

  #         for (t of thresholds) {
  #           if (t.max > size) {
  #             label = t.label;
  #             break;
  #           }
  #         }

  #         core.setOutput('label', label);

  #   - name: Assign label
  #     uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
  #     with:
  #       script: |
  #         const labels = await github.rest.issues.listLabelsOnIssue({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           issue_number: context.issue.number,
  #         });

  #         const assigned = new Set(labels.data.map(l => l.name));
  #         const sizes = new Set([
  #           '${{ inputs.xs-label }}',
  #           '${{ inputs.s-label }}',
  #           '${{ inputs.m-label }}',
  #           '${{ inputs.l-label }}',
  #           '${{ inputs.xl-label }}',
  #           '${{ inputs.xxl-label }}',
  #         ]);

  #         const size = '${{ steps.label.outputs.label }}';
  #         sizes.delete(size);

  #         if (!assigned.has(size)) {
  #           console.debug(`adding label: ${size}`);

  #           github.rest.issues.addLabels({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #             labels: [size],
  #           })
  #         }

  #         for (const s of sizes) {
  #           if (assigned.has(s)) {
  #             console.debug(`removing label: ${s}`);

  #             github.rest.issues.removeLabel({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               issue_number: context.issue.number,
  #               name: s,
  #             });
  #           }
  #         }
